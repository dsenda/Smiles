
1c_code_2_timer0_norm_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068e  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000228  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034d  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include	<avr/io.h>
int O_F = 0;			// Used for overflow count.

int main (void)
{
	DDRB = 0xFF;		// Set PORTB as output.
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRC &= (0 << 2);	// Set PORTC as input
  94:	87 b1       	in	r24, 0x07	; 7
  96:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 2);	// Enable pull-up.
  98:	42 9a       	sbi	0x08, 2	; 8
	TCCR0B = 0x0;		// Sets normal mode.
  9a:	15 bc       	out	0x25, r1	; 37
	TCCR0B = 0b00000101;// Sets 1024 pre-scaler.
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	85 bd       	out	0x25, r24	; 37
	{
		if (PINC & 0x04)	// If switch is not pressed.
		PORTB = 0b11111111;	// Turns of LED.
		else				// If switch is pressed.
		{
			PORTB = 0b11111011;	// Turns LED on.
  a0:	4b ef       	ldi	r20, 0xFB	; 251
	TCCR0B = 0x0;		// Sets normal mode.
	TCCR0B = 0b00000101;// Sets 1024 pre-scaler.
	while (1)
	{
		if (PINC & 0x04)	// If switch is not pressed.
		PORTB = 0b11111111;	// Turns of LED.
  a2:	9f ef       	ldi	r25, 0xFF	; 255
	PORTC |= (1 << 2);	// Enable pull-up.
	TCCR0B = 0x0;		// Sets normal mode.
	TCCR0B = 0b00000101;// Sets 1024 pre-scaler.
	while (1)
	{
		if (PINC & 0x04)	// If switch is not pressed.
  a4:	32 9b       	sbis	0x06, 2	; 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x1c>
		PORTB = 0b11111111;	// Turns of LED.
  a8:	95 b9       	out	0x05, r25	; 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <main+0x14>
		else				// If switch is pressed.
		{
			PORTB = 0b11111011;	// Turns LED on.
  ac:	45 b9       	out	0x05, r20	; 5
			TCNT0 = 0;			// Resets timer.
  ae:	16 bc       	out	0x26, r1	; 38
			for (O_F = 0; O_F < 5630; O_F++) // For loop used to create delay.
  b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
			{
				while (TCNT0 <= 254){}; // Loop used to keep track of overflows.
  bc:	86 b5       	in	r24, 0x26	; 38
  be:	8f 3f       	cpi	r24, 0xFF	; 255
  c0:	e9 f7       	brne	.-6      	; 0xbc <main+0x2c>
		PORTB = 0b11111111;	// Turns of LED.
		else				// If switch is pressed.
		{
			PORTB = 0b11111011;	// Turns LED on.
			TCNT0 = 0;			// Resets timer.
			for (O_F = 0; O_F < 5630; O_F++) // For loop used to create delay.
  c2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  c6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	2f 3f       	cpi	r18, 0xFF	; 255
  d0:	85 e1       	ldi	r24, 0x15	; 21
  d2:	38 07       	cpc	r19, r24
  d4:	99 f7       	brne	.-26     	; 0xbc <main+0x2c>
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <main+0x14>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
