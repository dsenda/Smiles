
3c_code_1_timer0_interrupts_ctc_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f0  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028a  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initiate_timer>:
int num = 0;				// Used for while loops.
int LED1 = 0b11111011;		// Output value used to turn LED on.

void initiate_timer()
{
	TCCR0B = 0b10;			// Sets CTC mode.
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	85 bd       	out	0x25, r24	; 37
	TCCR0B = 0b00000101;	// Sets 1024 pre-scaler.
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);// Enables output compare match interrupt.
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	80 83       	st	Z, r24
	OCR0A = 255;			// Sets output compare register A to 255.
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bd       	out	0x27, r24	; 39
	sei();					// Enables global interrupts.
  bc:	78 94       	sei
	TCNT0 = 0;				// Resets timer.
  be:	16 bc       	out	0x26, r1	; 38
  c0:	08 95       	ret

000000c2 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)		// Keeps count of overflows.
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	O_F++;					// Increments overflow count.
  d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <O_F>
  d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <O_F+0x1>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <O_F+0x1>
  de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <O_F>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main(void)
{
	DDRB = 0xff;			// Sets port b pins to outputs.
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 b9       	out	0x04, r24	; 4
	initiate_timer();		// Function that initiates timer.
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <initiate_timer>
	while (1)				// While loop that generates wave.
	{
		PORTB = LED1;		// Turns LED connected to PB2 on.
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
				num++;		// Increment num to exit loop.
				O_F = 0;	// Reset overflow count.
			}
		}
		
		PORTB = 255;		// Turns LED off.
  fc:	6f ef       	ldi	r22, 0xFF	; 255
{
	DDRB = 0xff;			// Sets port b pins to outputs.
	initiate_timer();		// Function that initiates timer.
	while (1)				// While loop that generates wave.
	{
		PORTB = LED1;		// Turns LED connected to PB2 on.
  fe:	80 81       	ld	r24, Z
 100:	85 b9       	out	0x05, r24	; 5
		num = 0;			// Resets num value.
 102:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 106:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		TCNT0 = 0;			// Resets timer.
 10a:	16 bc       	out	0x26, r1	; 38
 10c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 110:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
		while(num <= 0)		// For loop used to create delay.
 114:	0c c0       	rjmp	.+24     	; 0x12e <main+0x3e>
		{
			if (O_F >= 18)	// If overflow count equals 18:
 116:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <O_F>
 11a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <O_F+0x1>
 11e:	42 97       	sbiw	r24, 0x12	; 18
 120:	3c f0       	brlt	.+14     	; 0x130 <main+0x40>
			{
				num++;		// Increment num to exit loop.
				O_F = 0;	// Reset overflow count.
 122:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <O_F+0x1>
 126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <O_F>
 12a:	4f 5f       	subi	r20, 0xFF	; 255
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
 12e:	9a 01       	movw	r18, r20
	while (1)				// While loop that generates wave.
	{
		PORTB = LED1;		// Turns LED connected to PB2 on.
		num = 0;			// Resets num value.
		TCNT0 = 0;			// Resets timer.
		while(num <= 0)		// For loop used to create delay.
 130:	12 16       	cp	r1, r18
 132:	13 06       	cpc	r1, r19
 134:	84 f7       	brge	.-32     	; 0x116 <main+0x26>
				num++;		// Increment num to exit loop.
				O_F = 0;	// Reset overflow count.
			}
		}
		
		PORTB = 255;		// Turns LED off.
 136:	65 b9       	out	0x05, r22	; 5
		num = 0;			// Resets num value.
 138:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 13c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		TCNT0 = 0;			// Resets timer.
 140:	16 bc       	out	0x26, r1	; 38
 142:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 146:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
		while(num <= 0)		// For loop used to create delay.
 14a:	0c c0       	rjmp	.+24     	; 0x164 <main+0x74>
		{
			if (O_F >= 26)	// If overflow count equals 26:
 14c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <O_F>
 150:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <O_F+0x1>
 154:	4a 97       	sbiw	r24, 0x1a	; 26
 156:	3c f0       	brlt	.+14     	; 0x166 <main+0x76>
			{
				num++;		// Increment num to exit loop.
				O_F = 0;	// Reset overflow count.
 158:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <O_F+0x1>
 15c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <O_F>
 160:	4f 5f       	subi	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	9a 01       	movw	r18, r20
		}
		
		PORTB = 255;		// Turns LED off.
		num = 0;			// Resets num value.
		TCNT0 = 0;			// Resets timer.
		while(num <= 0)		// For loop used to create delay.
 166:	12 16       	cp	r1, r18
 168:	13 06       	cpc	r1, r19
 16a:	84 f7       	brge	.-32     	; 0x14c <main+0x5c>
 16c:	c8 cf       	rjmp	.-112    	; 0xfe <main+0xe>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
