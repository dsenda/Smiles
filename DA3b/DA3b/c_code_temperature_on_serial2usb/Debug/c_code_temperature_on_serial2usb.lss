
c_code_temperature_on_serial2usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ba  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000709  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000333  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000101  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initiate_timer>:

void usart_init ();
void usart_send (unsigned char ch);
void initiate_timer()
{
	TCCR0A = 0b10;			// Sets CTC mode.
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101;	// Sets 1024 pre-scaler.
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	85 bd       	out	0x25, r24	; 37
	OCR0A = 255;			// Sets output compare register A to 255.
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);// Enables output compare match interrupt.
  9c:	ee e6       	ldi	r30, 0x6E	; 110
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	sei();					// Enables global interrupts.
  a6:	78 94       	sei
	TCNT0 = 0;				// Resets timer.
  a8:	16 bc       	out	0x26, r1	; 38
  aa:	08 95       	ret

000000ac <__vector_14>:
}
ISR(TIMER0_COMPA_vect)		// Keeps count of overflows.
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	O_F++;					// Increments overflow count.
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <O_F>
  be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <O_F+0x1>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <O_F+0x1>
  c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <O_F>
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <usart_init>:
	return 0;
}

void usart_init (void)					// Initializes USART.
{
	UCSR0B = (1<<TXEN0);
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<< UCSZ01)|(1<<UCSZ00);
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = F_CPU/16/BAUD_RATE-1;
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ec:	08 95       	ret

000000ee <usart_send>:
}

void usart_send (unsigned char ch)		// Transmits characters to computer.
{
	while (! (UCSR0A & (1<<UDRE0)));	// Waits until UDR0 is empty.
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	95 ff       	sbrs	r25, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <usart_send+0x4>
	UDR0 = ch;							// Transmit ch.
  f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fc:	08 95       	ret

000000fe <main>:
	O_F++;					// Increments overflow count.
}

int main (void)
{
	usart_init ();
  fe:	0e 94 6d 00 	call	0xda	; 0xda <usart_init>
	// Setup and enable ADC
	ADMUX = (0<<REFS1)|	// Reference Selection Bits.
 102:	85 e4       	ldi	r24, 0x45	; 69
 104:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(1<<REFS0)|			// AVcc - external cap at AREF.
	(0<<ADLAR)|			// ADC Left Adjust Result.
	(1<<MUX2)|			// Analog Channel Selection Bits.
	(0<<MUX1)|			// ADC4 (PC5).
	(1<<MUX0);
	ADCSRA = (1<<ADEN)|	// ADC ENable.
 108:	85 e8       	ldi	r24, 0x85	; 133
 10a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	(0<<ADIF)|			// ADC Interrupt Flag.
	(0<<ADIE)|			// ADC Interrupt Enable.
	(1<<ADPS2)|			// ADC Pre-scaler Select Bits.
	(0<<ADPS1)|
	(1<<ADPS0);
	initiate_timer();	// Function that initiates timer.
 10e:	0e 94 48 00 	call	0x90	; 0x90 <initiate_timer>
	while (1)
	{
		ADCSRA|=(1<<ADSC);				// Starts conversion.
 112:	ca e7       	ldi	r28, 0x7A	; 122
 114:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0 = 0;						// Resets timer.
		while (num <= 0)
		{
			if (O_F >= 61)
			{
				int a = ADCL;
 116:	0f 2e       	mov	r0, r31
 118:	f8 e7       	ldi	r31, 0x78	; 120
 11a:	8f 2e       	mov	r8, r31
 11c:	91 2c       	mov	r9, r1
 11e:	f0 2d       	mov	r31, r0
				a = a | (ADCH<<8);
 120:	0f 2e       	mov	r0, r31
 122:	f9 e7       	ldi	r31, 0x79	; 121
 124:	af 2e       	mov	r10, r31
 126:	b1 2c       	mov	r11, r1
 128:	f0 2d       	mov	r31, r0
				a = (a/1024.0) * 5000/10;
				usart_send((a/100)+'0');
 12a:	0f 2e       	mov	r0, r31
 12c:	f4 e6       	ldi	r31, 0x64	; 100
 12e:	cf 2e       	mov	r12, r31
 130:	d1 2c       	mov	r13, r1
 132:	f0 2d       	mov	r31, r0
				a = a % 100;
				usart_send((a/10)+'0');
 134:	0f 2e       	mov	r0, r31
 136:	fa e0       	ldi	r31, 0x0A	; 10
 138:	ef 2e       	mov	r14, r31
 13a:	f1 2c       	mov	r15, r1
 13c:	f0 2d       	mov	r31, r0
	(0<<ADPS1)|
	(1<<ADPS0);
	initiate_timer();	// Function that initiates timer.
	while (1)
	{
		ADCSRA|=(1<<ADSC);				// Starts conversion.
 13e:	88 81       	ld	r24, Y
 140:	80 64       	ori	r24, 0x40	; 64
 142:	88 83       	st	Y, r24
		while((ADCSRA&(1<<ADIF))==0);	// Waits for conversion to finish.
 144:	88 81       	ld	r24, Y
 146:	84 ff       	sbrs	r24, 4
 148:	fd cf       	rjmp	.-6      	; 0x144 <main+0x46>
		ADCSRA |= (1<<ADIF);
 14a:	88 81       	ld	r24, Y
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	88 83       	st	Y, r24
		num = 0;						// Resets num count.
 150:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		TCNT0 = 0;						// Resets timer.
 158:	16 bc       	out	0x26, r1	; 38
		while (num <= 0)
 15a:	4d c0       	rjmp	.+154    	; 0x1f6 <main+0xf8>
		{
			if (O_F >= 61)
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <O_F>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <O_F+0x1>
 164:	cd 97       	sbiw	r24, 0x3d	; 61
 166:	0c f4       	brge	.+2      	; 0x16a <main+0x6c>
 168:	4a c0       	rjmp	.+148    	; 0x1fe <main+0x100>
			{
				int a = ADCL;
 16a:	f4 01       	movw	r30, r8
 16c:	60 81       	ld	r22, Z
				a = a | (ADCH<<8);
 16e:	f5 01       	movw	r30, r10
 170:	80 81       	ld	r24, Z
				a = (a/1024.0) * 5000/10;
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	78 2b       	or	r23, r24
 176:	07 2e       	mov	r0, r23
 178:	00 0c       	add	r0, r0
 17a:	88 0b       	sbc	r24, r24
 17c:	99 0b       	sbc	r25, r25
 17e:	0e 94 ae 01 	call	0x35c	; 0x35c <__floatsisf>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	5a e3       	ldi	r21, 0x3A	; 58
 18a:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e4       	ldi	r19, 0x40	; 64
 192:	4c e9       	ldi	r20, 0x9C	; 156
 194:	55 e4       	ldi	r21, 0x45	; 69
 196:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e2       	ldi	r20, 0x20	; 32
 1a0:	51 e4       	ldi	r21, 0x41	; 65
 1a2:	0e 94 04 01 	call	0x208	; 0x208 <__divsf3>
 1a6:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixsfsi>
				usart_send((a/100)+'0');
 1aa:	cb 01       	movw	r24, r22
 1ac:	b6 01       	movw	r22, r12
 1ae:	0e 94 a7 02 	call	0x54e	; 0x54e <__divmodhi4>
 1b2:	8c 01       	movw	r16, r24
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	86 0f       	add	r24, r22
 1b8:	0e 94 77 00 	call	0xee	; 0xee <usart_send>
				a = a % 100;
				usart_send((a/10)+'0');
 1bc:	c8 01       	movw	r24, r16
 1be:	b7 01       	movw	r22, r14
 1c0:	0e 94 a7 02 	call	0x54e	; 0x54e <__divmodhi4>
 1c4:	18 2f       	mov	r17, r24
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	86 0f       	add	r24, r22
 1ca:	0e 94 77 00 	call	0xee	; 0xee <usart_send>
				a = a % 10;
				usart_send((a)+'0');
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	81 0f       	add	r24, r17
 1d2:	0e 94 77 00 	call	0xee	; 0xee <usart_send>
				usart_send('\r');
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	0e 94 77 00 	call	0xee	; 0xee <usart_send>
				num++;					// Increments num to exit while loop.
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				O_F = 0;				// Resets overflow count.
 1ee:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <O_F+0x1>
 1f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <O_F>
		ADCSRA|=(1<<ADSC);				// Starts conversion.
		while((ADCSRA&(1<<ADIF))==0);	// Waits for conversion to finish.
		ADCSRA |= (1<<ADIF);
		num = 0;						// Resets num count.
		TCNT0 = 0;						// Resets timer.
		while (num <= 0)
 1f6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1fa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1fe:	12 16       	cp	r1, r18
 200:	13 06       	cpc	r1, r19
 202:	0c f0       	brlt	.+2      	; 0x206 <main+0x108>
 204:	ab cf       	rjmp	.-170    	; 0x15c <main+0x5e>
 206:	9b cf       	rjmp	.-202    	; 0x13e <main+0x40>

00000208 <__divsf3>:
 208:	0e 94 18 01 	call	0x230	; 0x230 <__divsf3x>
 20c:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_round>
 210:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_pscB>
 214:	58 f0       	brcs	.+22     	; 0x22c <__divsf3+0x24>
 216:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fp_pscA>
 21a:	40 f0       	brcs	.+16     	; 0x22c <__divsf3+0x24>
 21c:	29 f4       	brne	.+10     	; 0x228 <__divsf3+0x20>
 21e:	5f 3f       	cpi	r21, 0xFF	; 255
 220:	29 f0       	breq	.+10     	; 0x22c <__divsf3+0x24>
 222:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_inf>
 226:	51 11       	cpse	r21, r1
 228:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_szero>
 22c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__fp_nan>

00000230 <__divsf3x>:
 230:	0e 94 11 02 	call	0x422	; 0x422 <__fp_split3>
 234:	68 f3       	brcs	.-38     	; 0x210 <__divsf3+0x8>

00000236 <__divsf3_pse>:
 236:	99 23       	and	r25, r25
 238:	b1 f3       	breq	.-20     	; 0x226 <__divsf3+0x1e>
 23a:	55 23       	and	r21, r21
 23c:	91 f3       	breq	.-28     	; 0x222 <__divsf3+0x1a>
 23e:	95 1b       	sub	r25, r21
 240:	55 0b       	sbc	r21, r21
 242:	bb 27       	eor	r27, r27
 244:	aa 27       	eor	r26, r26
 246:	62 17       	cp	r22, r18
 248:	73 07       	cpc	r23, r19
 24a:	84 07       	cpc	r24, r20
 24c:	38 f0       	brcs	.+14     	; 0x25c <__divsf3_pse+0x26>
 24e:	9f 5f       	subi	r25, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	44 1f       	adc	r20, r20
 258:	aa 1f       	adc	r26, r26
 25a:	a9 f3       	breq	.-22     	; 0x246 <__divsf3_pse+0x10>
 25c:	35 d0       	rcall	.+106    	; 0x2c8 <__divsf3_pse+0x92>
 25e:	0e 2e       	mov	r0, r30
 260:	3a f0       	brmi	.+14     	; 0x270 <__divsf3_pse+0x3a>
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	32 d0       	rcall	.+100    	; 0x2ca <__divsf3_pse+0x94>
 266:	91 50       	subi	r25, 0x01	; 1
 268:	50 40       	sbci	r21, 0x00	; 0
 26a:	e6 95       	lsr	r30
 26c:	00 1c       	adc	r0, r0
 26e:	ca f7       	brpl	.-14     	; 0x262 <__divsf3_pse+0x2c>
 270:	2b d0       	rcall	.+86     	; 0x2c8 <__divsf3_pse+0x92>
 272:	fe 2f       	mov	r31, r30
 274:	29 d0       	rcall	.+82     	; 0x2c8 <__divsf3_pse+0x92>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	bb 1f       	adc	r27, r27
 27e:	26 17       	cp	r18, r22
 280:	37 07       	cpc	r19, r23
 282:	48 07       	cpc	r20, r24
 284:	ab 07       	cpc	r26, r27
 286:	b0 e8       	ldi	r27, 0x80	; 128
 288:	09 f0       	breq	.+2      	; 0x28c <__divsf3_pse+0x56>
 28a:	bb 0b       	sbc	r27, r27
 28c:	80 2d       	mov	r24, r0
 28e:	bf 01       	movw	r22, r30
 290:	ff 27       	eor	r31, r31
 292:	93 58       	subi	r25, 0x83	; 131
 294:	5f 4f       	sbci	r21, 0xFF	; 255
 296:	3a f0       	brmi	.+14     	; 0x2a6 <__divsf3_pse+0x70>
 298:	9e 3f       	cpi	r25, 0xFE	; 254
 29a:	51 05       	cpc	r21, r1
 29c:	78 f0       	brcs	.+30     	; 0x2bc <__divsf3_pse+0x86>
 29e:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_inf>
 2a2:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_szero>
 2a6:	5f 3f       	cpi	r21, 0xFF	; 255
 2a8:	e4 f3       	brlt	.-8      	; 0x2a2 <__divsf3_pse+0x6c>
 2aa:	98 3e       	cpi	r25, 0xE8	; 232
 2ac:	d4 f3       	brlt	.-12     	; 0x2a2 <__divsf3_pse+0x6c>
 2ae:	86 95       	lsr	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	b7 95       	ror	r27
 2b6:	f7 95       	ror	r31
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <__divsf3_pse+0x78>
 2bc:	88 0f       	add	r24, r24
 2be:	91 1d       	adc	r25, r1
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	97 f9       	bld	r25, 7
 2c6:	08 95       	ret
 2c8:	e1 e0       	ldi	r30, 0x01	; 1
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	bb 1f       	adc	r27, r27
 2d2:	62 17       	cp	r22, r18
 2d4:	73 07       	cpc	r23, r19
 2d6:	84 07       	cpc	r24, r20
 2d8:	ba 07       	cpc	r27, r26
 2da:	20 f0       	brcs	.+8      	; 0x2e4 <__divsf3_pse+0xae>
 2dc:	62 1b       	sub	r22, r18
 2de:	73 0b       	sbc	r23, r19
 2e0:	84 0b       	sbc	r24, r20
 2e2:	ba 0b       	sbc	r27, r26
 2e4:	ee 1f       	adc	r30, r30
 2e6:	88 f7       	brcc	.-30     	; 0x2ca <__divsf3_pse+0x94>
 2e8:	e0 95       	com	r30
 2ea:	08 95       	ret

000002ec <__fixsfsi>:
 2ec:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fixunssfsi>
 2f0:	68 94       	set
 2f2:	b1 11       	cpse	r27, r1
 2f4:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_szero>
 2f8:	08 95       	ret

000002fa <__fixunssfsi>:
 2fa:	0e 94 19 02 	call	0x432	; 0x432 <__fp_splitA>
 2fe:	88 f0       	brcs	.+34     	; 0x322 <__fixunssfsi+0x28>
 300:	9f 57       	subi	r25, 0x7F	; 127
 302:	98 f0       	brcs	.+38     	; 0x32a <__fixunssfsi+0x30>
 304:	b9 2f       	mov	r27, r25
 306:	99 27       	eor	r25, r25
 308:	b7 51       	subi	r27, 0x17	; 23
 30a:	b0 f0       	brcs	.+44     	; 0x338 <__fixunssfsi+0x3e>
 30c:	e1 f0       	breq	.+56     	; 0x346 <__fixunssfsi+0x4c>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	1a f0       	brmi	.+6      	; 0x31e <__fixunssfsi+0x24>
 318:	ba 95       	dec	r27
 31a:	c9 f7       	brne	.-14     	; 0x30e <__fixunssfsi+0x14>
 31c:	14 c0       	rjmp	.+40     	; 0x346 <__fixunssfsi+0x4c>
 31e:	b1 30       	cpi	r27, 0x01	; 1
 320:	91 f0       	breq	.+36     	; 0x346 <__fixunssfsi+0x4c>
 322:	0e 94 33 02 	call	0x466	; 0x466 <__fp_zero>
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	08 95       	ret
 32a:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_zero>
 32e:	67 2f       	mov	r22, r23
 330:	78 2f       	mov	r23, r24
 332:	88 27       	eor	r24, r24
 334:	b8 5f       	subi	r27, 0xF8	; 248
 336:	39 f0       	breq	.+14     	; 0x346 <__fixunssfsi+0x4c>
 338:	b9 3f       	cpi	r27, 0xF9	; 249
 33a:	cc f3       	brlt	.-14     	; 0x32e <__fixunssfsi+0x34>
 33c:	86 95       	lsr	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b3 95       	inc	r27
 344:	d9 f7       	brne	.-10     	; 0x33c <__fixunssfsi+0x42>
 346:	3e f4       	brtc	.+14     	; 0x356 <__fixunssfsi+0x5c>
 348:	90 95       	com	r25
 34a:	80 95       	com	r24
 34c:	70 95       	com	r23
 34e:	61 95       	neg	r22
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	08 95       	ret

00000358 <__floatunsisf>:
 358:	e8 94       	clt
 35a:	09 c0       	rjmp	.+18     	; 0x36e <__floatsisf+0x12>

0000035c <__floatsisf>:
 35c:	97 fb       	bst	r25, 7
 35e:	3e f4       	brtc	.+14     	; 0x36e <__floatsisf+0x12>
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	99 23       	and	r25, r25
 370:	a9 f0       	breq	.+42     	; 0x39c <__floatsisf+0x40>
 372:	f9 2f       	mov	r31, r25
 374:	96 e9       	ldi	r25, 0x96	; 150
 376:	bb 27       	eor	r27, r27
 378:	93 95       	inc	r25
 37a:	f6 95       	lsr	r31
 37c:	87 95       	ror	r24
 37e:	77 95       	ror	r23
 380:	67 95       	ror	r22
 382:	b7 95       	ror	r27
 384:	f1 11       	cpse	r31, r1
 386:	f8 cf       	rjmp	.-16     	; 0x378 <__floatsisf+0x1c>
 388:	fa f4       	brpl	.+62     	; 0x3c8 <__floatsisf+0x6c>
 38a:	bb 0f       	add	r27, r27
 38c:	11 f4       	brne	.+4      	; 0x392 <__floatsisf+0x36>
 38e:	60 ff       	sbrs	r22, 0
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <__floatsisf+0x6c>
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8f 4f       	sbci	r24, 0xFF	; 255
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	16 c0       	rjmp	.+44     	; 0x3c8 <__floatsisf+0x6c>
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <__floatsisf+0x48>
 3a0:	96 e9       	ldi	r25, 0x96	; 150
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <__floatsisf+0x6a>
 3a4:	77 23       	and	r23, r23
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <__floatsisf+0x54>
 3a8:	9e e8       	ldi	r25, 0x8E	; 142
 3aa:	87 2f       	mov	r24, r23
 3ac:	76 2f       	mov	r23, r22
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__floatsisf+0x5e>
 3b0:	66 23       	and	r22, r22
 3b2:	71 f0       	breq	.+28     	; 0x3d0 <__floatsisf+0x74>
 3b4:	96 e8       	ldi	r25, 0x86	; 134
 3b6:	86 2f       	mov	r24, r22
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	2a f0       	brmi	.+10     	; 0x3c8 <__floatsisf+0x6c>
 3be:	9a 95       	dec	r25
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	da f7       	brpl	.-10     	; 0x3be <__floatsisf+0x62>
 3c8:	88 0f       	add	r24, r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret

000003d2 <__fp_inf>:
 3d2:	97 f9       	bld	r25, 7
 3d4:	9f 67       	ori	r25, 0x7F	; 127
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	08 95       	ret

000003de <__fp_nan>:
 3de:	9f ef       	ldi	r25, 0xFF	; 255
 3e0:	80 ec       	ldi	r24, 0xC0	; 192
 3e2:	08 95       	ret

000003e4 <__fp_pscA>:
 3e4:	00 24       	eor	r0, r0
 3e6:	0a 94       	dec	r0
 3e8:	16 16       	cp	r1, r22
 3ea:	17 06       	cpc	r1, r23
 3ec:	18 06       	cpc	r1, r24
 3ee:	09 06       	cpc	r0, r25
 3f0:	08 95       	ret

000003f2 <__fp_pscB>:
 3f2:	00 24       	eor	r0, r0
 3f4:	0a 94       	dec	r0
 3f6:	12 16       	cp	r1, r18
 3f8:	13 06       	cpc	r1, r19
 3fa:	14 06       	cpc	r1, r20
 3fc:	05 06       	cpc	r0, r21
 3fe:	08 95       	ret

00000400 <__fp_round>:
 400:	09 2e       	mov	r0, r25
 402:	03 94       	inc	r0
 404:	00 0c       	add	r0, r0
 406:	11 f4       	brne	.+4      	; 0x40c <__fp_round+0xc>
 408:	88 23       	and	r24, r24
 40a:	52 f0       	brmi	.+20     	; 0x420 <__fp_round+0x20>
 40c:	bb 0f       	add	r27, r27
 40e:	40 f4       	brcc	.+16     	; 0x420 <__fp_round+0x20>
 410:	bf 2b       	or	r27, r31
 412:	11 f4       	brne	.+4      	; 0x418 <__fp_round+0x18>
 414:	60 ff       	sbrs	r22, 0
 416:	04 c0       	rjmp	.+8      	; 0x420 <__fp_round+0x20>
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__fp_split3>:
 422:	57 fd       	sbrc	r21, 7
 424:	90 58       	subi	r25, 0x80	; 128
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	59 f0       	breq	.+22     	; 0x442 <__fp_splitA+0x10>
 42c:	5f 3f       	cpi	r21, 0xFF	; 255
 42e:	71 f0       	breq	.+28     	; 0x44c <__fp_splitA+0x1a>
 430:	47 95       	ror	r20

00000432 <__fp_splitA>:
 432:	88 0f       	add	r24, r24
 434:	97 fb       	bst	r25, 7
 436:	99 1f       	adc	r25, r25
 438:	61 f0       	breq	.+24     	; 0x452 <__fp_splitA+0x20>
 43a:	9f 3f       	cpi	r25, 0xFF	; 255
 43c:	79 f0       	breq	.+30     	; 0x45c <__fp_splitA+0x2a>
 43e:	87 95       	ror	r24
 440:	08 95       	ret
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	14 06       	cpc	r1, r20
 448:	55 1f       	adc	r21, r21
 44a:	f2 cf       	rjmp	.-28     	; 0x430 <__fp_split3+0xe>
 44c:	46 95       	lsr	r20
 44e:	f1 df       	rcall	.-30     	; 0x432 <__fp_splitA>
 450:	08 c0       	rjmp	.+16     	; 0x462 <__fp_splitA+0x30>
 452:	16 16       	cp	r1, r22
 454:	17 06       	cpc	r1, r23
 456:	18 06       	cpc	r1, r24
 458:	99 1f       	adc	r25, r25
 45a:	f1 cf       	rjmp	.-30     	; 0x43e <__fp_splitA+0xc>
 45c:	86 95       	lsr	r24
 45e:	71 05       	cpc	r23, r1
 460:	61 05       	cpc	r22, r1
 462:	08 94       	sec
 464:	08 95       	ret

00000466 <__fp_zero>:
 466:	e8 94       	clt

00000468 <__fp_szero>:
 468:	bb 27       	eor	r27, r27
 46a:	66 27       	eor	r22, r22
 46c:	77 27       	eor	r23, r23
 46e:	cb 01       	movw	r24, r22
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__mulsf3>:
 474:	0e 94 4d 02 	call	0x49a	; 0x49a <__mulsf3x>
 478:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_round>
 47c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fp_pscA>
 480:	38 f0       	brcs	.+14     	; 0x490 <__mulsf3+0x1c>
 482:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_pscB>
 486:	20 f0       	brcs	.+8      	; 0x490 <__mulsf3+0x1c>
 488:	95 23       	and	r25, r21
 48a:	11 f0       	breq	.+4      	; 0x490 <__mulsf3+0x1c>
 48c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_inf>
 490:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__fp_nan>
 494:	11 24       	eor	r1, r1
 496:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_szero>

0000049a <__mulsf3x>:
 49a:	0e 94 11 02 	call	0x422	; 0x422 <__fp_split3>
 49e:	70 f3       	brcs	.-36     	; 0x47c <__mulsf3+0x8>

000004a0 <__mulsf3_pse>:
 4a0:	95 9f       	mul	r25, r21
 4a2:	c1 f3       	breq	.-16     	; 0x494 <__mulsf3+0x20>
 4a4:	95 0f       	add	r25, r21
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	55 1f       	adc	r21, r21
 4aa:	62 9f       	mul	r22, r18
 4ac:	f0 01       	movw	r30, r0
 4ae:	72 9f       	mul	r23, r18
 4b0:	bb 27       	eor	r27, r27
 4b2:	f0 0d       	add	r31, r0
 4b4:	b1 1d       	adc	r27, r1
 4b6:	63 9f       	mul	r22, r19
 4b8:	aa 27       	eor	r26, r26
 4ba:	f0 0d       	add	r31, r0
 4bc:	b1 1d       	adc	r27, r1
 4be:	aa 1f       	adc	r26, r26
 4c0:	64 9f       	mul	r22, r20
 4c2:	66 27       	eor	r22, r22
 4c4:	b0 0d       	add	r27, r0
 4c6:	a1 1d       	adc	r26, r1
 4c8:	66 1f       	adc	r22, r22
 4ca:	82 9f       	mul	r24, r18
 4cc:	22 27       	eor	r18, r18
 4ce:	b0 0d       	add	r27, r0
 4d0:	a1 1d       	adc	r26, r1
 4d2:	62 1f       	adc	r22, r18
 4d4:	73 9f       	mul	r23, r19
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	62 1f       	adc	r22, r18
 4dc:	83 9f       	mul	r24, r19
 4de:	a0 0d       	add	r26, r0
 4e0:	61 1d       	adc	r22, r1
 4e2:	22 1f       	adc	r18, r18
 4e4:	74 9f       	mul	r23, r20
 4e6:	33 27       	eor	r19, r19
 4e8:	a0 0d       	add	r26, r0
 4ea:	61 1d       	adc	r22, r1
 4ec:	23 1f       	adc	r18, r19
 4ee:	84 9f       	mul	r24, r20
 4f0:	60 0d       	add	r22, r0
 4f2:	21 1d       	adc	r18, r1
 4f4:	82 2f       	mov	r24, r18
 4f6:	76 2f       	mov	r23, r22
 4f8:	6a 2f       	mov	r22, r26
 4fa:	11 24       	eor	r1, r1
 4fc:	9f 57       	subi	r25, 0x7F	; 127
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	9a f0       	brmi	.+38     	; 0x528 <__mulsf3_pse+0x88>
 502:	f1 f0       	breq	.+60     	; 0x540 <__mulsf3_pse+0xa0>
 504:	88 23       	and	r24, r24
 506:	4a f0       	brmi	.+18     	; 0x51a <__mulsf3_pse+0x7a>
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	bb 1f       	adc	r27, r27
 50e:	66 1f       	adc	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	91 50       	subi	r25, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	a9 f7       	brne	.-22     	; 0x504 <__mulsf3_pse+0x64>
 51a:	9e 3f       	cpi	r25, 0xFE	; 254
 51c:	51 05       	cpc	r21, r1
 51e:	80 f0       	brcs	.+32     	; 0x540 <__mulsf3_pse+0xa0>
 520:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_inf>
 524:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_szero>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	e4 f3       	brlt	.-8      	; 0x524 <__mulsf3_pse+0x84>
 52c:	98 3e       	cpi	r25, 0xE8	; 232
 52e:	d4 f3       	brlt	.-12     	; 0x524 <__mulsf3_pse+0x84>
 530:	86 95       	lsr	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b7 95       	ror	r27
 538:	f7 95       	ror	r31
 53a:	e7 95       	ror	r30
 53c:	9f 5f       	subi	r25, 0xFF	; 255
 53e:	c1 f7       	brne	.-16     	; 0x530 <__mulsf3_pse+0x90>
 540:	fe 2b       	or	r31, r30
 542:	88 0f       	add	r24, r24
 544:	91 1d       	adc	r25, r1
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret

0000054e <__divmodhi4>:
 54e:	97 fb       	bst	r25, 7
 550:	07 2e       	mov	r0, r23
 552:	16 f4       	brtc	.+4      	; 0x558 <__divmodhi4+0xa>
 554:	00 94       	com	r0
 556:	07 d0       	rcall	.+14     	; 0x566 <__divmodhi4_neg1>
 558:	77 fd       	sbrc	r23, 7
 55a:	09 d0       	rcall	.+18     	; 0x56e <__divmodhi4_neg2>
 55c:	0e 94 bb 02 	call	0x576	; 0x576 <__udivmodhi4>
 560:	07 fc       	sbrc	r0, 7
 562:	05 d0       	rcall	.+10     	; 0x56e <__divmodhi4_neg2>
 564:	3e f4       	brtc	.+14     	; 0x574 <__divmodhi4_exit>

00000566 <__divmodhi4_neg1>:
 566:	90 95       	com	r25
 568:	81 95       	neg	r24
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__divmodhi4_neg2>:
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255

00000574 <__divmodhi4_exit>:
 574:	08 95       	ret

00000576 <__udivmodhi4>:
 576:	aa 1b       	sub	r26, r26
 578:	bb 1b       	sub	r27, r27
 57a:	51 e1       	ldi	r21, 0x11	; 17
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__udivmodhi4_ep>

0000057e <__udivmodhi4_loop>:
 57e:	aa 1f       	adc	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	a6 17       	cp	r26, r22
 584:	b7 07       	cpc	r27, r23
 586:	10 f0       	brcs	.+4      	; 0x58c <__udivmodhi4_ep>
 588:	a6 1b       	sub	r26, r22
 58a:	b7 0b       	sbc	r27, r23

0000058c <__udivmodhi4_ep>:
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	5a 95       	dec	r21
 592:	a9 f7       	brne	.-22     	; 0x57e <__udivmodhi4_loop>
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	bc 01       	movw	r22, r24
 59a:	cd 01       	movw	r24, r26
 59c:	08 95       	ret

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
