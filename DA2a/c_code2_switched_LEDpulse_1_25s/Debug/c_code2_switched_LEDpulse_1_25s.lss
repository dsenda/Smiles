
c_code2_switched_LEDpulse_1_25s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000fc  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000760  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000291  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int num = 1;				// Used for while loop.
int comp;					// Used to compare in loop.

int main(void)
{
	DDRB = 0b100;		// Enables PB2 as output.
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;		// Enables PC2 as input.
  aa:	17 b8       	out	0x07, r1	; 7
	while(num = 1)		// Loop used to keep program running.
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	70 e0       	ldi	r23, 0x00	; 0
	{
		comp = PINB & 0b100;	// Bit masking.
		if (comp = 0b100)
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB = 0xFB;		// Sets PB2 to 0.
  b4:	2b ef       	ldi	r18, 0xFB	; 251
			_delay_ms(1250);	// Turns LED on for 1.25s (Ton).
			PORTB = PORTB^0b100;
  b6:	94 e0       	ldi	r25, 0x04	; 4

int main(void)
{
	DDRB = 0b100;		// Enables PB2 as output.
	DDRC = 0x00;		// Enables PC2 as input.
	while(num = 1)		// Loop used to keep program running.
  b8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  bc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
	{
		comp = PINB & 0b100;	// Bit masking.
  c0:	83 b1       	in	r24, 0x03	; 3
		if (comp = 0b100)
  c2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
  c6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
		{
			PORTB = 0xFB;		// Sets PB2 to 0.
  ca:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	3f ef       	ldi	r19, 0xFF	; 255
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	ed e3       	ldi	r30, 0x3D	; 61
  d2:	31 50       	subi	r19, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e0 40       	sbci	r30, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x36>
  dc:	00 00       	nop
			_delay_ms(1250);	// Turns LED on for 1.25s (Ton).
			PORTB = PORTB^0b100;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	89 27       	eor	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
		}
		else
		{
			PORTB = PORTB^0b100;
		}
		PORTB = PORTB^0b100;	// Sets PB2 to 1.
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	fc e9       	ldi	r31, 0x9C	; 156
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x48>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x4e>
  f4:	00 00       	nop
  f6:	e0 cf       	rjmp	.-64     	; 0xb8 <main+0x12>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
